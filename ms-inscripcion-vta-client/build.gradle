plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'gob.mdmq.coretributario'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
  	set('springCloudVersion', "2023.0.0")
  	set('springBootAdminVersion', "3.2.1")
}

dependencies {
 implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'io.r2dbc:r2dbc-mssql:1.0.0.RELEASE'
    
    // para server-config se lo agrega a cada microservicio cliente
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    
    // eureka cliente
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

	// Admin dashboard
	implementation 'de.codecentric:spring-boot-admin-starter-client'
	
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	
    // Health check
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	 implementation 'io.micrometer:micrometer-tracing-bridge-brave'
   implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
   implementation 'io.micrometer:micrometer-registry-prometheus'
	  
    // Circuit Breaker
	implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.2.0'
	implementation 'io.github.resilience4j:resilience4j-reactor:2.1.0'
    implementation 'org.springframework.boot:spring-boot-starter-logging' // Logs con SLF4J

	// Load Balanced
	implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
	
	implementation('org.springframework.cloud:spring-cloud-starter-bootstrap')
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
  imports {
   // para server-config se lo agrega a cada microservicio cliente
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
  }
}

tasks.named('test') {
	useJUnitPlatform()
}